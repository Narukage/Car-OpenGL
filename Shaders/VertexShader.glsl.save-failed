uniform mat4 u_MVPMatrix; 	// in: Matriz Projection*ModelView
uniform mat4 u_MVMatrix;	// in: Matriz ModelView
uniform vec4 u_Color;		// in: color del objeto

attribute vec4 a_Position;	// in: Posición de cada vértice
attribute vec3 a_Normal;	// in: Normal de cada vértice

varying vec4 v_Color;		// out: Color al fragment shader

void main()
{
	vec4 LightPos = u_MVMatrix*vec4(0, 10, 7, 1);		// Posición de la luz [fija]
	vec3 P = vec3(u_MVMatrix * a_Position);	            // Posición del vértice
	vec3 N = vec3(u_MVMatrix * vec4(a_Normal, 0.0));    // Normal del vértice

	float d = length(LightPos.xyz - P);			            // distancia de la luz
	vec3  L = normalize(LightPos.xyz - P);			        // Vector Luz
                                                        // (15% de int. ambiente)
	float diffuse = max(dot(N, L), 0.15);		        // Cálculo de la int. difusa
	// Cálculo de la atenuación
	float attenuation = 1.0/(0.3+(0.01*d)+(0.01*d*d));
	//diffuse = diffuse*attenuation;

	v_Color = u_Color * diffuse;

	gl_Position = u_MVPMatrix * a_Position;
}
